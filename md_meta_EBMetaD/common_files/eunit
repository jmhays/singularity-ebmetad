hills.c:  if(!mtd_data->hills_file) mtd_data->hills_file = fopen((mtd_data->ionode?mtd_data->hilfilen:"/dev/null"), "a");
hills.c:  if(mtd_data->hills_push_first) {
hills.c:      fprintf(mtd_data->hills_file, "#! ACTIVE %d",nactive);
hills.c:        for(i_c=0;i_c<colvar.nconst;i_c++){ if(colvar.on[i_c]) fprintf(mtd_data->hills_file, " %d",i_c+1); }
hills.c:      fprintf(mtd_data->hills_file, " %s",colvar.hills_label); 
hills.c:      fprintf(mtd_data->hills_file,"\n");
hills.c:    mtd_data->hills_push_first=0;
hills.c:  fprintf(mtd_data->hills_file, "%10.3f   ", mtd_data->time);
hills.c:  for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", hills.ss0_t[hills.n_hills][icv]);
hills.c:  for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", colvar.delta_s[hills.n_hills][icv]);
hills.c:         fprintf(mtd_data->hills_file, "%14.9f   ",colvar.medy_ver_nh[hills.n_hills][icv]); 
hills.c:            fprintf(mtd_data->hills_file, "%14.9f   ",colvar.medy_ver_loc_nh[hills.n_hills][icv][jcv]); 
hills.c:      fprintf(mtd_data->hills_file, "%14.9f   ",hills.ww_wfact[hills.n_hills]);
hills.c:   fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]*colvar.wfactor/(colvar.wfactor-1.0)/mtd_data->eunit,colvar.wfactor);
hills.c:   fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]/mtd_data->eunit,0.0);
hills.c:  fclose(mtd_data->hills_file);
hills.c:    fprintf(mtd_data->hills_file, "%10.3f   ", mtd_data->time);
hills.c:      if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%10.5f   ", hills.ss0_t[hills.n_hills][icv]);
hills.c:      if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%10.5f   ", colvar.delta_s[hills.n_hills][icv]);
hills.c:    fprintf(mtd_data->hills_file, "%10.5f\n", hills.ww[hills.n_hills]);
hills.c:              if(!mtd_data->hills_file) mtd_data->hills_file = fopen((mtd_data->ionode?mtd_data->hilfilen:"/dev/null"), "a");
hills.c:              fprintf(mtd_data->hills_file, "%10.3f   ", mtd_data->time);
hills.c:              for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", hills.ss0_t[hills.n_hills][icv]);
hills.c:              for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", colvar.delta_s[hills.n_hills][icv]);
hills.c:               fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]*colvar.wfactor/(colvar.wfactor-1.0)/mtd_data->eunit,colvar.wfactor);
hills.c:               fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]/mtd_data->eunit,0.0);
hills.c:  fclose(mtd_data->hills_file);
hills.c:              if(!mtd_data->hills_file) mtd_data->hills_file = fopen((mtd_data->ionode?mtd_data->hilfilen:"/dev/null"), "a");
hills.c:              fprintf(mtd_data->hills_file, "%10.3f   ", mtd_data->time);
hills.c:              for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", hills.ss0_t[hills.n_hills][icv]);
hills.c:              for(icv=0;icv<ncv;icv++) if(colvar.on[icv]) fprintf(mtd_data->hills_file, "%14.9f   ", colvar.delta_s[hills.n_hills][icv]);
hills.c:               fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]*colvar.wfactor/(colvar.wfactor-1.0)/mtd_data->eunit,colvar.wfactor);
hills.c:               fprintf(mtd_data->hills_file, "%14.9f   %4.3f \n", hills.ww[hills.n_hills]/mtd_data->eunit,0.0);
hills.c:  fclose(mtd_data->hills_file);
hills.c:  fflush(mtd_data->hills_file);
hills.c:    fclose(mtd_data->hills_file);
hills.c:    mtd_data->hills_file=NULL;
hills.c:  if(mtd_data->hills_add_first) mtd_data->last_hill_at_this_step=colvar.it;
hills.c:  mtd_data->hills_add_first=0;
hills.c:  if(hills.max_height>0.0) hills.wwr=hills.rate*(colvar.it-mtd_data->last_hill_at_this_step)*mtd_data->dt;
hills.c:    this_ww = hills.wwr*exp(-hills.Vhills/(mtd_data->boltz*(colvar.wfactor-1.0)*colvar.simtemp));
hills.c:  if(hills.max_height>0.0 && this_ww<hills.max_height && (colvar.it-mtd_data->last_hill_at_this_step)<hills.max_stride) return;
hills.c:  mtd_data->last_hill_at_this_step=colvar.it;
hills.c:    nrep=mtd_data->nrepl;
hills.c:    myrep=mtd_data->repl;
hills.c:    if(mtd_data->ionode){
hills.c:    sprintf(walkfilen, "%s.%i", mtd_data->basefilen, iw);  
hills.c:    sprintf(walkfilen, "%s", mtd_data->hilfilen); 
hills.c:           sprintf(buf,"Cannot read HILLS file :: %s",mtd_data->hilfilen);
hills.c:             hills.ww[line] = (real) dummy * mtd_data->eunit;                                                              // read the hills height
hills.c:             hills.ww[line] = (real) dummy * mtd_data->eunit;                                                              // read the hills height
hills.c:             hills.ww[line] = (real) dummy * mtd_data->eunit;                                                              // read the hills height
hills.c:     fprintf(mtd_data->fplog, "|- RESTARTING HILLS: TOT %li HILLS read from %s\n",hills.n_hills-hills.read,walkfilen);
hills.c:      fprintf(mtd_data->fplog, "|- UPDATING HILLS: from %li to %li TOT %li HILLS read from %s \n", hills.read,hills.n_hills-1,hills.n_hills-hills.read,walkfilen);
hills.c://  for(i=hills.read;i<hills.n_hills;i++) fprintf(mtd_data->fplog, "UPDATING # %i HILLS %f %f \n",i,hills.ss0_t[i][0],hills.ss0_t[i][1]);
hills.c://  for(i=0;i<hills.n_hills;i++) fprintf(mtd_data->fplog, "AFTER UPDATE # %i HILLS %f %f \n",i,hills.ss0_t[i][0],hills.ss0_t[i][1]);
hills.c:  fprintf(mtd_data->fplog,"\n");
hills.c:  fflush(mtd_data->fplog);
hills.c:      fprintf(mtd_data->fplog,"HILLS REALLOCATION--OLD DIMENSION: %li\n",oldtot);
hills.c:      fprintf(mtd_data->fplog,"HILLS REALLOCATION--NEW DIMENSION: %li\n",hills.ntothills);
metadyn.c:  if (nr > mtd_data->sum_nalloc) {
metadyn.c:    mtd_data->sum_nalloc = nr;
metadyn.c:    srenew(mtd_data->sum_buf,mtd_data->sum_nalloc);
metadyn.c:    MPI_Allreduce(r,mtd_data->sum_buf,nr,MPI_DOUBLE,MPI_SUM,mtd_data->comm);
metadyn.c:    MPI_Allreduce(r,mtd_data->sum_buf,nr,MPI_FLOAT,MPI_SUM,mtd_data->comm);
metadyn.c:    r[i] = mtd_data->sum_buf[i];
metadyn.c:  if (nr > mtd_data->sumi_nalloc) {
metadyn.c:    mtd_data->sumi_nalloc = nr;
metadyn.c:    srenew(mtd_data->sumi_buf,mtd_data->sumi_nalloc);
metadyn.c:    MPI_Allreduce(r,mtd_data->sumi_buf,nr,MPI_INT,MPI_SUM,mtd_data->comm);
metadyn.c:    r[i] = mtd_data->sumi_buf[i];
metadyn.c:  if (nr > mtd_data->intersum_nalloc) {
metadyn.c:    mtd_data->intersum_nalloc = nr;
metadyn.c:    srenew(mtd_data->intersum_buf,mtd_data->intersum_nalloc);
metadyn.c:    MPI_Allreduce(r,mtd_data->intersum_buf,nr,MPI_DOUBLE,MPI_SUM,mtd_data->intercomm);
metadyn.c:    MPI_Allreduce(r,mtd_data->intersum_buf,nr,MPI_FLOAT,MPI_SUM,mtd_data->intercomm);
metadyn.c:    r[i] = mtd_data->intersum_buf[i];
metadyn.c:  MPI_Comm_size(mtd_data->comm,&size);
metadyn.c:  MPI_Comm_rank(mtd_data->comm,&rank);
metadyn.c:      fprintf(mtd_data->fplog, "WARNING: MM-META DOES NOT SUPPORT GRID, OPTION TURNED OFF!\n");
read_restraint.c:  file = fopen(mtd_data->metaFilename, "r");
read_restraint.c:  fflush(mtd_data->fplog);
read_restraint.c:    if( (mtd_data->repl==-1)&& (mtd_data->mcr->ms)==0 ){
read_restraint.c:      sprintf(buf, "MISSING PLUMED INPUT FILE %s",mtd_data->metaFilename);
read_restraint.c:    } else if(mtd_data->mcr->ms!=0 &&mtd_data->repl==-1) {
read_restraint.c:      strcpy(tmpmeta,mtd_data->metaFilename);
read_restraint.c:      tmpmeta[strlen(mtd_data->metaFilename) - 4] = '\0';
read_restraint.c:      sprintf(tmpmeta+strlen(tmpmeta),"%d",mtd_data->mcr->ms->sim);
read_restraint.c:        sprintf(buf, "MISSING PLUMED INPUT FILE %s",mtd_data->metaFilename);
read_restraint.c:    } else if(mtd_data->repl>-1) {
read_restraint.c:      strcpy(tmpmeta,mtd_data->metaFilename);
read_restraint.c:      tmpmeta[strlen(mtd_data->metaFilename) - 4] = '\0';
read_restraint.c:      sprintf(tmpmeta+strlen(tmpmeta),"%d",mtd_data->repl);
read_restraint.c:        sprintf(buf, "MISSING PLUMED INPUT FILE %s",mtd_data->metaFilename);
read_restraint.c:    if(mtd_data->repl==-1){
read_restraint.c:      sprintf(buf, "MISSING PLUMED INPUT FILE %s",mtd_data->metaFilename);
read_restraint.c:    } else if(mtd_data->repl>-1) {
read_restraint.c:      strcpy(tmpmeta,mtd_data->metaFilename);
read_restraint.c:      tmpmeta[strlen(mtd_data->metaFilename) - 4] = '\0';
read_restraint.c:      sprintf(tmpmeta+strlen(tmpmeta),"%d",mtd_data->repl);
read_restraint.c:        sprintf(buf, "MISSING PLUMED INPUT FILE %s",mtd_data->metaFilename);
read_restraint.c:  fprintf(mtd_data->fplog, " \n");  
read_restraint.c:  fprintf(mtd_data->fplog, "::::::::::::::::: READING PLUMED INPUT :::::::::::::::::\n");
read_restraint.c:  plumed_read_input(&input,file,mtd_data->fplog);
read_restraint.c:      fprintf(mtd_data->fplog, "\nCOMMENT: ");
read_restraint.c:      for(i=1;i<nw;i++)fprintf(mtd_data->fplog, "%s ", word[i]);
read_restraint.c:      fprintf(mtd_data->fplog,"\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-##################################################################\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|- ENABLE_UNTESTED_FEATURES\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|- THIS FLAG ENABLES FEATURES WHICH ARE NOT EXPLAINED IN THE MANUAL\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|- AND COULD BE BUGGY\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|- USE IT ONLY IF YOU ARE A PLUMED DEVELOPERS\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-##################################################################\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|- NEW COLVAR FMT ENABLED\n");
read_restraint.c:      mtd_data->newcolvarfmt=1;
read_restraint.c:      fprintf(mtd_data->fplog, "|- OLD COLVAR FMT ENABLED\n");
read_restraint.c:      mtd_data->newcolvarfmt=0;
read_restraint.c:      fprintf(mtd_data->fplog, "|-COMMITMENT ANALYSIS: YOU WILL ONLY MONITOR YOUR CVs MICRODYNAMICS\n");
read_restraint.c:        fprintf(mtd_data->fplog, "|--CV %i: A min %f, max %f -- B min %f, max %f\n", ix+1, commit.Amin[ix], commit.Amax[ix], commit.Bmin[ix], commit.Bmax[ix]);
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:        else if(!strcmp(word[iw],"CV_LIST")){ iw++; reconinpt.nconst=plumed_get_group(word[iw],&reconinpt.cvlist,0,&input,mtd_data->fplog); }
read_restraint.c:           iw++; sscanf(word[iw],"%lf",&uno); reconinpt.height = (real) uno*mtd_data->eunit;
read_restraint.c:      //fprintf(mtd_data->fplog,"NUMBER OF CLUSTER SCALES %i \n",reconinpt.nscales);
read_restraint.c:          iw++; sscanf(word[iw],"%lf",&uno); hills.wwr = (real) uno*mtd_data->eunit;
read_restraint.c:      if(hills.rate==0.0) hills.rate = hills.wwr/hills.nt_hills/mtd_data->dt;
read_restraint.c:      if(hills.wwr==0.0) hills.wwr=hills.rate*hills.nt_hills*mtd_data->dt;
read_restraint.c:      fprintf(mtd_data->fplog,"|-HILLS:\n");
read_restraint.c:        fprintf(mtd_data->fplog,"|--HEIGHT %f  WRITING STRIDE %i DEPOSITION RATE %f \n",
read_restraint.c:                hills.wwr/mtd_data->eunit, hills.nt_hills, hills.rate/mtd_data->eunit);
read_restraint.c:        fprintf(mtd_data->fplog,"|--DEPOSITION RATE %f \n",hills.rate/mtd_data->eunit);
read_restraint.c:        fprintf(mtd_data->fplog,"|--MAXIMUM STRIDE BETWEEN HILLS %i \n",hills.max_stride);
read_restraint.c:        fprintf(mtd_data->fplog,"|--MAXIMUM HEIGHT               %f \n",hills.max_height);
read_restraint.c:      if(logical.restart_hills) fprintf(mtd_data->fplog,"|-RESTARTING METADYNAMICS!\n");
read_restraint.c:      if(hills.nr_hills!=1) fprintf(mtd_data->fplog,"|--READING STRIDE %i\n", hills.nr_hills);
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog,"|-MULTIPLE WALKERS: NWALKERS %i ID %i\n", hills.nwalkers,hills.idwalker);
read_restraint.c:      if(hills.nr_hills!=1) fprintf(mtd_data->fplog,"|--READING STRIDE %i\n", hills.nr_hills);
read_restraint.c:      fprintf(mtd_data->fplog,"|--DIRECTORY FOR HILLS I/O %s\n", hills.dir);
read_restraint.c:          iw++; sscanf(word[iw],"%lf", &uno); mtd_data->time_offset= uno;  
read_restraint.c:      fprintf(mtd_data->fplog,"|-PRINTING ON COLVAR FILE EVERY %i STEPS\n",colvar.nt_print);
read_restraint.c:      fprintf(mtd_data->fplog,"|-INITIAL TIME OFFSET IS %f TIME UNITS\n",mtd_data->time_offset);
read_restraint.c:      if(logical.append) fprintf(mtd_data->fplog,"|-APPENDING TO OLD COLVAR\n");
read_restraint.c:      fprintf(mtd_data->fplog,"|-USING HILLS_LABEL %s IN HEADERS OF COLVAR AND HILLS FILES\n",colvar.hills_label);
read_restraint.c:       fprintf(mtd_data->fplog,"|- DUMPING ATOMS\n");
read_restraint.c:           iw++; mtd_data->dump_atoms+=plumed_get_group(word[iw],&mtd_data->dump_list,mtd_data->dump_atoms,&input,mtd_data->fplog);
read_restraint.c:           iw++; sscanf(word[iw],"%i", &mtd_data->dump_stride);
read_restraint.c:       fprintf(mtd_data->fplog,"|- SET MEMBERS: ");
read_restraint.c:       for(i=0;i<mtd_data->dump_atoms;i++){
read_restraint.c:         fprintf(mtd_data->fplog," %d ",mtd_data->dump_list[i]+1);if((i+1)%20==0)fprintf(mtd_data->fplog,"\n               ");
read_restraint.c:       }fprintf(mtd_data->fplog,"\n\n");
read_restraint.c:       fprintf(mtd_data->fplog,"|- ALIGNING ATOMS\n");
read_restraint.c:           iw++; colvar.align_atoms+=plumed_get_group(word[iw],&colvar.align_list,colvar.align_atoms,&input,mtd_data->fplog);
read_restraint.c:       fprintf(mtd_data->fplog,"|- SET MEMBERS: ");
read_restraint.c:         fprintf(mtd_data->fplog," %d ",colvar.align_list[i]+1);if((i+1)%20==0)fprintf(mtd_data->fplog,"\n               ");
read_restraint.c:       }fprintf(mtd_data->fplog,"\n\n");
read_restraint.c:        fprintf(mtd_data->fplog, "|-PARALLEL HILLS ");
read_restraint.c:        if(logical.parallel_hills) fprintf(mtd_data->fplog, "ON");
read_restraint.c:        else                       fprintf(mtd_data->fplog, "OFF");
read_restraint.c:        fprintf(mtd_data->fplog, "\n\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-PARALLEL TEMPERING METADYNAMICS\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|--REPLICA 0 TEMPERATURE = %f\n", mtd_data->rte0);
read_restraint.c:      fprintf(mtd_data->fplog, "|--REPLICA %i TEMPERATURE = %f\n", mtd_data->repl, mtd_data->rteio);
read_restraint.c:      if(mtd_data->repl==-1) {
read_restraint.c:        fprintf(mtd_data->fplog, "\n!!!! mdrun not in replica exchange mode, keyword PTMETAD will not be considered !!!!\n");
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:          fprintf(mtd_data->fplog, "|-HAMILTONIAN REPLICA-EXCHANGE\n");
read_restraint.c:          fprintf(mtd_data->fplog, "|--DO NOT RESCALE GAUSSIANS HEIGHT WITH TEMPERATURE\n"); 
read_restraint.c:        fprintf(mtd_data->fplog, "|--SIGMA = %lf\n",(double) colvar.ptmetad_sigma);
read_restraint.c:        fprintf(mtd_data->fplog, "|--NEIGHBOUR = %i\n",colvar.ptmetad_neighbours);
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-BIAS EXCHANGE METADYNAMICS\n");
read_restraint.c:      if(mtd_data->repl==-1&&!(mtd_data->mcr->ms)) {
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-TAMD/DAFED WITH TFACTOR %f (CVTEMP = %f) \n", tamd.wfactor,tamd.wtemp);
read_restraint.c:      fprintf(mtd_data->fplog, "|-SPRING CONSTANTS CALCULATED FROM SIGMA AND WTEMP OF EACH VARIABLE\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-INITIAL RANDOMIZATION OF RESTRAINTS AT T = %f\n",tamd.simtemp);
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-WELL-TEMPERED METADYNAMICS WITH BIASFACTOR %f (CVTEMP = %f) \n", colvar.wfactor,colvar.wtemp);
read_restraint.c:      if(logical.read_old_bf) fprintf(mtd_data->fplog, "|--READING OLD BIASFACTOR WHEN RESTARTING \n");
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog, " MINIMUM-MODE METADYNAMICS SIMULATION; REMARK: INVERSION NON ACTIVE(NOT COMPATIBLE) \n");
read_restraint.c:          fprintf(mtd_data->fplog, "|NON-LOCAL-MINIMUM-MODE METADYNAMICS WITH AVER %f \n", colvar.nt_medy);
read_restraint.c:          fprintf(mtd_data->fplog, "|REMARK: ONLY 1 DIMENSION, \"NDIM\", \"DELTA_LOC1\", \"DELTA_LOC2\"AND \"WFACTOR\" WILL NOT BE READ \n");
read_restraint.c:          fprintf(mtd_data->fplog, "|-MINIMUM-MODE METADYNAMICS WITH AVER %i NDIM %i DELTA_LOC1 %f DELTA_LOC2 %f AND WFACTOR %f \n", colvar.nt_medy,colvar.ndim_medy,colvar.delta_loc_medy1,colvar.delta_loc_medy2,colvar.wfact_loc_medy);
read_restraint.c:      fprintf(mtd_data->fplog,"|- CV DERIVATIVES DEBUGGING \n"); 
read_restraint.c:      read_dist(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_mindist(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_coord(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_angle(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_hbonds(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_torsion(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_rgyr(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_dipole(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_dihcor(word, count, &input,&iline,mtd_data->fplog);
read_restraint.c:      read_ppii(word, count, &input,&iline,mtd_data->fplog);
read_restraint.c:      read_waterbridge(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_alfabeta(word, count,&input,&iline,mtd_data->fplog);
read_restraint.c:      read_path(word, count, &input,mtd_data->fplog);
read_restraint.c:      read_path(word, count, &input,mtd_data->fplog);
read_restraint.c:      read_path(word, count, &input,mtd_data->fplog);
read_restraint.c:      read_position(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_elstpot(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_puckering(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_energy(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_helix(word, count,&input,&iline,mtd_data->fplog);
read_restraint.c:      read_alpharmsd(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_antibetarmsd(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_parabetarmsd(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_camshift(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_cs3meth(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_noe(word, count,&input, mtd_data->fplog);
read_restraint.c:      read_pca(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_cmap(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_phivalues(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_intracontact(word, count, &input, &iline, mtd_data->fplog);
read_restraint.c:      read_poly(word, count, &input, &iline, mtd_data->fplog);
read_restraint.c:      read_func(word, count, &input, &iline, &nw,  mtd_data->fplog);
read_restraint.c:      read_bespoke(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_rdf(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_histogram(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_adf(word, count, &input, mtd_data->fplog);
read_restraint.c:      read_sprint(word, count,&input, mtd_data->fplog);
read_restraint.c:		read_msd(word, count, &input, mtd_data->fplog);
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvw.sigma[icv-1]=(real)uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:      fprintf(mtd_data->fplog, "|-WALL ON COLVAR %i: UPPER LIMIT = %f, KAPPA = %f, EXPONENT = %i, REDUX = %f, OFFSET = %f \n\n",
read_restraint.c:             icv, cvw.upper[icv-1], cvw.sigma[icv-1]/mtd_data->eunit, cvw.uexp[icv-1], cvw.ueps[icv-1], cvw.uoff[icv-1]);
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvw.lsigma[icv-1]=(real)uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:      fprintf(mtd_data->fplog, "|-WALL ON COLVAR %i: LOWER LIMIT = %f, KAPPA = %f, EXPONENT = %i, REDUX = %f, OFFSET = %f \n\n",
read_restraint.c:             icv, cvw.lower[icv-1], cvw.lsigma[icv-1]/mtd_data->eunit, cvw.lexp[icv-1], cvw.leps[icv-1], cvw.loff[icv-1]);
read_restraint.c:      fprintf(mtd_data->fplog, "|-INTERVAL ON COLVAR %i: LOWER_LIMIT = %f, UPPER_LIMIT = %f \n\n",
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvsteer.spring[icv-1]=(real) uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:        fprintf(mtd_data->fplog, "|-STEERING COLVAR %i TO %f: VELOCITY=%lf cvunit/kstep, SPRING=%lf\n\n", icv,cvsteer.max[icv-1],cvsteer.delta[icv-1],cvsteer.spring[icv-1]/mtd_data->eunit);
read_restraint.c:        fprintf(mtd_data->fplog, "|-STEERING COLVAR %i FROM %f TO %f: VELOCITY=%lf cvunit/kstep, SPRING=%lf\n\n", icv, cvsteer.start[icv-1],cvsteer.max[icv-1],cvsteer.delta[icv-1],cvsteer.spring[icv-1]/mtd_data->eunit);
read_restraint.c:      if(logical.append) fprintf(mtd_data->fplog,"|-RESTARTING STEERING!\n");
read_restraint.c:				  iw++; sscanf(word[iw], "%lf", &uno); dafed[icv-1].kappa=(real)uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:		fprintf(mtd_data->fplog, "|- DAFED ON COLVAR %i WITH FOLLOWING PARAMETERS\n",icv);
read_restraint.c:		fprintf(mtd_data->fplog, "|-\tTEMPERATURE %f\n",dafed[icv-1].temperature);
read_restraint.c:		fprintf(mtd_data->fplog, "|-\tMASS %f\n",dafed[icv-1].mass);
read_restraint.c:		fprintf(mtd_data->fplog, "|-\tKAPPA %f\n",dafed[icv-1].kappa);
read_restraint.c:		fprintf(mtd_data->fplog, "|-\tTHERMOSTAT TAU %f\n",dafed[icv-1].tauthermo);
read_restraint.c:			fprintf(mtd_data->fplog, "|-\tApply JACOBIAN_FORCE\n");
read_restraint.c:    					  fprintf(mtd_data->fplog, "|- WILL RESTART WITH d-AFED STATE FROM FILE %s \n",dafed_control.in_file );
read_restraint.c:    					  fprintf(mtd_data->fplog, "|- WILL WRITE d-AFED STATE TO FILE DAFED_STATE EVERY %d STEPS \n",dafed_control.write_freq);
read_restraint.c:						  fprintf(mtd_data->fplog, "|- RESPA STEPS FOR d-AFED %d\n",dafed_control.n_respa);
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvsteer.spring[icv-1]=(real) uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvsteer.slope[icv-1]=(real) uno*mtd_data->eunit; read_slope=1;
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvsteer.targetV[icv-1]=(real) uno*mtd_data->eunit; 
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvsteer.annealing[icv-1]=(real) uno*mtd_data->eunit; read_anneal=1;
read_restraint.c:      fprintf(mtd_data->fplog, "|-UMBRELLA SAMPLING OF COLVAR %i AT %f: SPRING=%lf SLOPE=%lf\n\n",
read_restraint.c:              icv,cvsteer.max[icv-1],cvsteer.spring[icv-1]/mtd_data->eunit,cvsteer.slope[icv-1]/mtd_data->eunit);
read_restraint.c:      if(logical.append) fprintf(mtd_data->fplog,"|-RESTARTING UMBRELLA SAMPLING!\n");
read_restraint.c:      if(read_anneal) fprintf(mtd_data->fplog,"|-UMBRELLA %i DEPEND ON TEMPERATURE AS %lf/T\n",icv-1, cvsteer.annealing[icv-1]/mtd_data->eunit);
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); cvcnstr.spring[icv-1]=(real) uno*mtd_data->eunit; 
read_restraint.c:      fprintf(mtd_data->fplog, "|-CONSTRAINED SAMPLING OF COLVAR %i AT %f: SPRING=%lf\n\n", icv,cvcnstr.pos[icv-1],cvcnstr.spring[icv-1]/mtd_data->eunit);
read_restraint.c:         read_steerplan(word, count, &input,  &iline ,mtd_data->fplog);
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); abmd.spring[icv-1]=(real) uno*mtd_data->eunit; read_kappa=1;
read_restraint.c:          iw++; sscanf(word[iw], "%lf", &uno); abmd.diff[icv-1]=(real) uno*mtd_data->eunit; read_diff=1;
read_restraint.c:        fprintf(mtd_data->fplog, "|-ABMD ON COLVAR %i TO %f: , SPRING=%lf\n\n", icv, abmd.exp[icv-1], abmd.spring[icv-1]/mtd_data->eunit);
read_restraint.c:        fprintf(mtd_data->fplog, "|-ABMD ON COLVAR %i RESTARTING FROM %f TO %f: , SPRING=%lf\n\n", icv, abmd.min[icv-1], abmd.exp[icv-1], abmd.spring[icv-1]/mtd_data->eunit);
read_restraint.c:      if(logical.restart_abmd) fprintf(mtd_data->fplog,"|-RESTARTING ABMD!\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-NO HILLS ON COLVAR %i\n", icv);
read_restraint.c:      fprintf(mtd_data->fplog, "APPLY INVERSION TO FREE ENERGY ON CV %i:\n", icv);
read_restraint.c:        fprintf(mtd_data->fplog, " LIMIT1 = %f\n",colvar.inv_limit[icv-1][0]); }
read_restraint.c:        fprintf(mtd_data->fplog, " LIMIT2 = %f\n",colvar.inv_limit[icv-1][1]); }
read_restraint.c:      fprintf(mtd_data->fplog, " REFLECTION INTERVAL (gaussian width units) = %f\n",colvar.inv_ref[icv-1]);
read_restraint.c:      fprintf(mtd_data->fplog, " INVERSION INTERVAL (gaussian width units) = %f\n",colvar.inv_inv[icv-1]);
read_restraint.c:      fprintf(mtd_data->fplog, " MAX GAUSSIAN HEIGHT FACTOR = %f\n\n",colvar.inv_maxww[icv-1]); 
read_restraint.c:      fprintf(mtd_data->fplog, "|-UPPER REFLECTING WALL ON CV %i, AT %f\n\n", icv, cvw.upper[icv-1]);
read_restraint.c:      fprintf(mtd_data->fplog, "|-LOWER REFLECTING WALL ON CV %i, AT %f\n\n", icv, cvw.lower[icv-1]);
read_restraint.c:      fprintf(mtd_data->fplog, "|- GRID SPLINE TURNED OFF\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-GRID ACTIVE ON CV %i NBIN %d MIN %f MAX %f \n", icv, grid.bin[grid.ncv],grid.min[grid.ncv],grid.max[grid.ncv]);
read_restraint.c:      if(grid.period[grid.ncv]) fprintf(mtd_data->fplog, "|-- PERIODIC GRID IS ON\n");
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:      fprintf(mtd_data->fplog, "|-WRITING GRID ON FILE \n");
read_restraint.c:      fprintf(mtd_data->fplog, "|--STRIDE %d FILENAME %s\n\n", grid.w_stride, grid.w_file);
read_restraint.c:      fprintf(mtd_data->fplog, "|-READING GRID FROM FILE %s \n\n",grid.r_file);
read_restraint.c:          colvar.pg.nlist=plumed_get_group(word[iw+1],&colvar.pg.list,0,&input,mtd_data->fplog); 
read_restraint.c:      fprintf(mtd_data->fplog, "|-EXTERNAL POTENTIAL ON CV ");
read_restraint.c:      for(i=0;i<extpot.ncv;i++) fprintf(mtd_data->fplog, " %d ",extpot.index[i]+1);
read_restraint.c:      fprintf(mtd_data->fplog, "FROM FILE %s \n\n",extpot.r_file);
read_restraint.c:      fprintf(mtd_data->fplog, "WARNING: You are not using GROMACS 4.5\n");
read_restraint.c:      fprintf(mtd_data->fplog, "WARNING: STOPWHEN will not dump the final configuration properly\n");
read_restraint.c:         fprintf(mtd_data->fplog, "|-STOPWHEN ENABLED ON CV %d: \n",icv+1);
read_restraint.c:         fprintf(mtd_data->fplog, "|-STOPWHEN CV %d IS MORE THAN %lf\n",icv+1,stopwhen.max[icv]);
read_restraint.c:         fprintf(mtd_data->fplog, "|-STOPWHEN CV %d IS LESS THAN %lf\n",icv+1,stopwhen.min[icv]);
read_restraint.c:           fprintf(mtd_data->fplog, "|-STOPWHEN SYNTAX:\n" );
read_restraint.c:           fprintf(mtd_data->fplog, "|-    STOPWHEN CV 1  MORETHAN 3.0 LESSTHAN 1.0 \n" );
read_restraint.c:           fprintf(mtd_data->fplog, "|-    STOPWHEN CV 1  LESSTHAN 1.0 \n" );
read_restraint.c:           fprintf(mtd_data->fplog, "|-     \n" );
read_restraint.c:      fprintf(mtd_data->fplog, "\n");
read_restraint.c:		read_couplingmatrix  ( word, &input, mtd_data->fplog );
read_restraint.c:      double tstep; tstep=mtd_data->dt;
read_restraint.c:      setup_recon( periods, tstep, reconinpt, myreconObj, mtd_data->fplog);
read_restraint.c:      fprintf(mtd_data->fplog, "|- RECONNAISSANCE METADYNAMICS ON COLVARS :");
read_restraint.c:        fprintf(mtd_data->fplog," %d ",reconinpt.cvlist[i]+1); if((i+1)%20==0)fprintf(mtd_data->fplog,"\n                    ");
read_restraint.c:      fprintf(mtd_data->fplog,"\n\n");
read_restraint.c:      setup_bespoke( bespoke_input, ncolvar, colvar.nbespoke, periods, mybespokeObj, mtd_data->fplog );
read_restraint.c:       if(colvar.on[i]){fprintf(mtd_data->fplog, "|-HILLS ACTIVE ON COLVAR %i\n", i+1);} 
read_restraint.c:       else            {fprintf(mtd_data->fplog, "|-NO HILLS     ON COLVAR %i\n", i+1);}
read_restraint.c:         tamd.spring[i]=mtd_data->boltz*tamd.simtemp/(colvar.delta_r[i]*colvar.delta_r[i]);
read_restraint.c:         fprintf(mtd_data->fplog, "|-CV %i : TAMD/DAFED WITH SPRING CONSTANT = %lf\n",i+1,tamd.spring[i]);
read_restraint.c:         fprintf(mtd_data->fplog, "|-CV %i : NO TAMD/DAFED\n", i+1);
read_restraint.c:    //   fprintf(mtd_data->fplog,"|-ANALYSIS: YOU WILL MONITOR BASIN OCCUPANCIES ONLY\n\n");  
read_restraint.c:    fprintf(mtd_data->fplog, "|-ANALYSIS: YOU WILL ONLY MONITOR YOUR CVs DYNAMICS\n\n");
read_restraint.c:    fprintf(mtd_data->fplog, "|-ANALYSIS: YOU WILL ONLY MONITOR YOUR CVs DYNAMICS\n\n");
read_restraint.c:  if(logical.do_hills&&logical.remd&&(!logical.rpxm)&&(!logical.norescale)) hills.wwr *= mtd_data->rteio/mtd_data->rte0;
read_restraint.c:  if(logical.do_hills&&logical.remd&&(!logical.rpxm)&&logical.welltemp) colvar.simtemp = mtd_data->rteio;
read_restraint.c:       fprintf(mtd_data->fplog, "|- FOUND PROJ_GRAD KEYWORD: NCV involved %d\n",colvar.pg.nlist);
read_restraint.c:       fprintf(mtd_data->fplog, "|- WHICH ARE: ");
read_restraint.c:       for(j=0;j<colvar.pg.nlist;j++){fprintf(mtd_data->fplog, " %d",colvar.pg.list[j]);}
read_restraint.c:       fprintf(mtd_data->fplog, "\n");
read_restraint.c:  fprintf(mtd_data->fplog, "|- DIFFERENT COLLECTIVE VARIABLE WILL BE CALCULATED AT DIFFERENT TIMES\n");
read_restraint.c:			initialize_dafed(&dafed[i], mtd_data->dt);
read_restraint.c:    if(logical.always[i]) fprintf(mtd_data->fplog, "|--CV %2i WILL BE EVALUATED EACH STEP\n", i+1);
read_restraint.c:    else fprintf(mtd_data->fplog, "|--CV %2i WILL BE EVALUATED ONLY WHEN NEEDED (OUTPUT OR EXCHANGE TRIAL)\n", i+1);
read_restraint.c:  cite_please("bono+09cpc",mtd_data->fplog);
read_restraint.c:  if(logical.do_hills) cite_please("laio-parr02pnas",mtd_data->fplog);
read_restraint.c:  if(logical.remd && !logical.rpxm) cite_please("buss+06jacs",mtd_data->fplog);
read_restraint.c:  if(logical.rpxm)       cite_please("pian-laio07jpcb",mtd_data->fplog);
read_restraint.c:  if(logical.welltemp)   cite_please("bard+08prl",mtd_data->fplog);
read_restraint.c:  if(logical.path)       cite_please("bran+07jcp",mtd_data->fplog);
read_restraint.c:  if(logical.puckering)  cite_please("sega+09jcp",mtd_data->fplog);
read_restraint.c:  if(logical.do_walkers) cite_please("rait+06jpcb",mtd_data->fplog);
read_restraint.c:  if(logical.do_alphabetarmsd) cite_please("pietrucci+09jctc",mtd_data->fplog);
read_restraint.c:  if(logical.do_sprint) cite_please("pietrucci+11prl",mtd_data->fplog);
read_restraint.c:  if(logical.do_inversion) cite_please("marinell-crespo10",mtd_data->fplog);
read_restraint.c:	  cite_please("abrams08jpcb",mtd_data->fplog);
read_restraint.c:	  cite_please("maragliano06cpl",mtd_data->fplog);
read_restraint.c:  if(logical.do_pca) cite_please("sutto-2010jctc",mtd_data->fplog);
read_restraint.c:  if(reconOn==1) cite_please("tribello-10pnas",mtd_data->fplog);
read_restraint.c:  fprintf(mtd_data->fplog,"\n"); 
read_restraint.c:  disclaimer(mtd_data->fplog);
read_restraint.c:  fflush(mtd_data->fplog);
restraint_adf.c:        if(colvar.cell_pbc[i_c]){ minimal_image(mtd_data->pos[iat], mtd_data->pos[kat], &mod_rik, rik); }
restraint_adf.c:          rik[0] = mtd_data->pos[iat][0]-mtd_data->pos[kat][0];
restraint_adf.c:          rik[1] = mtd_data->pos[iat][1]-mtd_data->pos[kat][1];
restraint_adf.c:          rik[2] = mtd_data->pos[iat][2]-mtd_data->pos[kat][2];
restraint_adf.c:        if(colvar.cell_pbc[i_c]){ minimal_image(mtd_data->pos[iat], mtd_data->pos[jat], &mod_rij, rij); }
restraint_adf.c:          rij[0] = mtd_data->pos[iat][0]-mtd_data->pos[jat][0];
restraint_adf.c:          rij[1] = mtd_data->pos[iat][1]-mtd_data->pos[jat][1];
restraint_adf.c:          rij[2] = mtd_data->pos[iat][2]-mtd_data->pos[jat][2];
restraint_adf.c:           if(colvar.cell_pbc[i_c]){ minimal_image(mtd_data->pos[iat], mtd_data->pos[kat], &mod_rik, rik); }
restraint_adf.c:             rik[0] = mtd_data->pos[iat][0]-mtd_data->pos[kat][0];
restraint_adf.c:             rik[1] = mtd_data->pos[iat][1]-mtd_data->pos[kat][1];
restraint_adf.c:             rik[2] = mtd_data->pos[iat][2]-mtd_data->pos[kat][2];
restraint_alfabeta.c:    minimal_image(mtd_data->pos[a1],mtd_data->pos[a0],&mod_rij,r01);
restraint_alfabeta.c:    minimal_image(mtd_data->pos[a2],mtd_data->pos[a1],&mod_rij,r21);
restraint_alfabeta.c:    minimal_image(mtd_data->pos[a3],mtd_data->pos[a2],&mod_rij,r23);
restraint_alpharmsd.c:          minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_alpharmsd.c:          rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_alpharmsd.c:          rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_alpharmsd.c:          rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_angle.c:      myp[j][0] += mtd_data->mass[iat]*mtd_data->pos[iat][0];
restraint_angle.c:      myp[j][1] += mtd_data->mass[iat]*mtd_data->pos[iat][1];
restraint_angle.c:      myp[j][2] += mtd_data->mass[iat]*mtd_data->pos[iat][2];
restraint_angle.c:      totmasse[j] += mtd_data->mass[iat];
restraint_angle.c:      for(ix=0;ix<3;ix++) colvar.myder[i_c][k][ix] = d[j][ix]*mtd_data->mass[iat]/totmasse[j];
restraint_antibetarmsd.c:      minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_antibetarmsd.c:      rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_antibetarmsd.c:      rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_antibetarmsd.c:      rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_antibetarmsd.c:          minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_antibetarmsd.c:          rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_antibetarmsd.c:          rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_antibetarmsd.c:          rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_bespoke.c:          mtd_data->pos[iat][ix] += teststep;
restraint_bespoke.c:          mtd_data->pos[iat][ix] += -2.*teststep;
restraint_bespoke.c:          mtd_data->pos[iat][ix] += teststep;
restraint.c:  colvar.it=mtd_data->istep;                                   // update microdynamics step
restraint.c:  if(colvar.it==mtd_data->istep_old){
restraint.c:    mtd_data->istep_old=colvar.it;
restraint.c:  set_pbc(&mtd_data->metapbc, mtd_data->ePBC, mtd_data->cell);                                              // set pbc
restraint.c:  if(logical.rpxm) rpxm = !(colvar.it%mtd_data->repl_ex_nst) && (logical.not_same_step);                    // have I got a replica exchange trial
restraint.c:       minimal_image(mtd_data->pos[iatom2],mtd_data->pos[iatom1],&dummy,distance);
restraint.c:       mtd_data->pos[iatom2][0]=mtd_data->pos[iatom1][0]+distance[0];
restraint.c:       mtd_data->pos[iatom2][1]=mtd_data->pos[iatom1][1]+distance[1];
restraint.c:       mtd_data->pos[iatom2][2]=mtd_data->pos[iatom1][2]+distance[2];
restraint.c:  if(mtd_data->dump_atoms && (logical.not_same_step)&&(!(colvar.it%mtd_data->dump_stride)) ){
restraint.c:    if(!mtd_data->dump_file) mtd_data->dump_file = open_xtc(mtd_data->dump_filen,"w");
restraint.c:    snew(atoms,mtd_data->dump_atoms);
restraint.c:    for(i=0;i<mtd_data->dump_atoms;i++){
restraint.c:      iat=mtd_data->dump_list[i];
restraint.c:      atoms[i][0]=mtd_data->pos[iat][0];
restraint.c:      atoms[i][1]=mtd_data->pos[iat][1];
restraint.c:      atoms[i][2]=mtd_data->pos[iat][2];
restraint.c:    write_xtc(mtd_data->dump_file,mtd_data->dump_atoms,colvar.it,mtd_data->time,mtd_data->cell,atoms,1000.0);
restraint.c:    //fprintf(mtd_data->fplog,"CALCULATING CV %d\n",i_c); 
restraint.c:    //fflush(mtd_data->fplog); 
restraint.c:    fprintf(mtd_data->fplog,"|---CALLING THE TEST \n");
restraint.c:    fprintf(mtd_data->fplog,"|---END OF CALL \n");
restraint.c:  mtd_data->time=colvar.it*(mtd_data->dt)+mtd_data->time_offset;
restraint.c:  if (logical.do_constraint) Vconstr+=constraint_engine(mtd_data->dt);            // shake on the cvs 
restraint.c:  if(ntp) print_colvar_enercv(mtd_data->time);	        	// dump COLVAR
restraint.c:  for(i=0;i<mtd_data->natoms;i++){
restraint.c:    mtd_data->force[i][0] = 0.0; 
restraint.c:    mtd_data->force[i][1] = 0.0;
restraint.c:    mtd_data->force[i][2] = 0.0;
restraint.c:      mtd_data->force[iat][0] += ddr*colvar.myder[i_c][i][0];     // PluMeD forces
restraint.c:      mtd_data->force[iat][1] += ddr*colvar.myder[i_c][i][1];
restraint.c:      mtd_data->force[iat][2] += ddr*colvar.myder[i_c][i][2];
restraint.c:        mtd_data->cforce[iat][0] += cvw.fwall[i_c]*colvar.myder[i_c][i][0]; 
restraint.c:        mtd_data->cforce[iat][1] += cvw.fwall[i_c]*colvar.myder[i_c][i][1]; 
restraint.c:        mtd_data->cforce[iat][2] += cvw.fwall[i_c]*colvar.myder[i_c][i][2];
restraint_cmap.c:               inpack.r0[i][0] = mtd_data->pos[iat][0];
restraint_cmap.c:               inpack.r0[i][1] = mtd_data->pos[iat][1];
restraint_cmap.c:               inpack.r0[i][2] = mtd_data->pos[iat][2];
restraint_coord.c:    (nlist[i_c]).base[j][0]=mtd_data->pos[i][0]; 
restraint_coord.c:    (nlist[i_c]).base[j][1]=mtd_data->pos[i][1]; 
restraint_coord.c:    (nlist[i_c]).base[j][2]=mtd_data->pos[i][2];
restraint_coord.c:        minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_coord.c:        rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_coord.c:        rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_coord.c:        rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_coord.c:      minimal_image(mtd_data->pos[i], (nlist[i_c]).base[j], &mod_rij, rij);    //UGLY AS HELL, BUT IT'S DLPOLY'S FAULT
restraint_coord.c:      rij[0] = mtd_data->pos[i][0]-(nlist[i_c]).base[j][0];
restraint_coord.c:      rij[1] = mtd_data->pos[i][1]-(nlist[i_c]).base[j][1];
restraint_coord.c:      rij[2] = mtd_data->pos[i][2]-(nlist[i_c]).base[j][2];
restraint_coord.c:        minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_coord.c:        rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_coord.c:        rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_coord.c:        rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_coord.c:        minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_coord.c:        rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_coord.c:        rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_coord.c:        rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_dihcor.c:    psi[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3], &mtd_data->metapbc, 
restraint_dihcor.c:    psi[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3], &mtd_data->metapbc, 
restraint_dihcor.c:     psi[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3],
restraint_dipole.c:    dipje[0] += mtd_data->pos[ai][0]*mtd_data->charge[ai];
restraint_dipole.c:    dipje[1] += mtd_data->pos[ai][1]*mtd_data->charge[ai];
restraint_dipole.c:    dipje[2] += mtd_data->pos[ai][2]*mtd_data->charge[ai];
restraint_dipole.c:    dfunc = mtd_data->charge[ai]/colvar.ss0[i_c];
restraint_dist.c:      if(mtd_data->repl!=-1) { 
restraint_dist.c:        repliche=mtd_data->nrepl; 
restraint_dist.c:        fact = 1.0/mtd_data->nrepl;
restraint_dist.c:        replica = mtd_data->repl;
restraint_dist.c:      } else if(mtd_data->mcr->ms->nsim>1) {
restraint_dist.c:        repliche = mtd_data->mcr->ms->nsim; 
restraint_dist.c:        fact = 1.0/mtd_data->mcr->ms->nsim;
restraint_dist.c:        replica = mtd_data->mcr->ms->sim;
restraint_dist.c:    if(firstTime) fprintf(mtd_data->fplog, "|- DISTANCE AVERAGED OVER %i REPL WITH FACT %lf\n", repliche, fact); fflush(mtd_data->fplog);
restraint_dist.c:    sum1[0] += mtd_data->mass[iat]*mtd_data->pos[iat][0];
restraint_dist.c:    sum1[1] += mtd_data->mass[iat]*mtd_data->pos[iat][1];
restraint_dist.c:    sum1[2] += mtd_data->mass[iat]*mtd_data->pos[iat][2];
restraint_dist.c:    mass1 += mtd_data->mass[iat];
restraint_dist.c:    sum2[0] += mtd_data->mass[iat]*mtd_data->pos[iat][0];
restraint_dist.c:    sum2[1] += mtd_data->mass[iat]*mtd_data->pos[iat][1];
restraint_dist.c:    sum2[2] += mtd_data->mass[iat]*mtd_data->pos[iat][2];
restraint_dist.c:    mass2 += mtd_data->mass[iat];
restraint_dist.c:    if(MASTER(mtd_data->mcr)) {
restraint_dist.c:    colvar.myder[i_c][i][0] =  fact*(mtd_data->mass[iat]*rij[0])/(mass1*mod_rij);
restraint_dist.c:    colvar.myder[i_c][i][1] =  fact*(mtd_data->mass[iat]*rij[1])/(mass1*mod_rij);
restraint_dist.c:    colvar.myder[i_c][i][2] =  fact*(mtd_data->mass[iat]*rij[2])/(mass1*mod_rij);
restraint_dist.c:    colvar.myder[i_c][i][0] = -fact*(mtd_data->mass[iat]*rij[0])/(mass2*mod_rij);
restraint_dist.c:    colvar.myder[i_c][i][1] = -fact*(mtd_data->mass[iat]*rij[1])/(mass2*mod_rij);
restraint_dist.c:    colvar.myder[i_c][i][2] = -fact*(mtd_data->mass[iat]*rij[2])/(mass2*mod_rij);
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_a[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_a[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_a[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_b[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_b[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_b[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_h[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_h[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_h[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:     fprintf(mtd_data->fplog,"|-POINT_FROM_AXIS: A %8.3f %8.3f %8.3f  ",sum_a[0],sum_a[1],sum_a[2]);
restraint_dist.c:     fprintf(mtd_data->fplog," B %8.3f %8.3f %8.3f  ",sum_b[0],sum_b[1],sum_b[2]);
restraint_dist.c:     fprintf(mtd_data->fplog," T %8.3f %8.3f %8.3f  ",sum_b[0]+tau_t*(sum_b[0]-sum_a[0]),sum_b[1]+tau_t*(sum_b[1]-sum_a[1]),sum_b[2]+tau_t*(sum_b[2]-sum_a[2]));
restraint_dist.c:     fprintf(mtd_data->fplog," H %8.3f %8.3f %8.3f  \n",sum_h[0],sum_h[1],sum_h[2]);
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    sum_a[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_a[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_a[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    sum_b[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_b[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_b[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    sum_h[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_h[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_h[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    sum_g[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_g[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_g[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    mass=mtd_data->mass[iat];   
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_a[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_a[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_a[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_b[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_b[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_b[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    sum_h[0] += mass*mtd_data->pos[iat][0];
restraint_dist.c:    sum_h[1] += mass*mtd_data->pos[iat][1];
restraint_dist.c:    sum_h[2] += mass*mtd_data->pos[iat][2];
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_dist.c:    else{mass=mtd_data->mass[iat];}   
restraint_elstpot.c:    sum1[0] += mtd_data->mass[iat]*mtd_data->pos[iat][0];
restraint_elstpot.c:    sum1[1] += mtd_data->mass[iat]*mtd_data->pos[iat][1];
restraint_elstpot.c:    sum1[2] += mtd_data->mass[iat]*mtd_data->pos[iat][2];
restraint_elstpot.c:    mass1 += mtd_data->mass[iat];
restraint_elstpot.c:      minimal_image(sum1, mtd_data->pos[iat], &mod_rij, rij);
restraint_elstpot.c:      func=(mtd_data->charge[iat]/mod_rij);
restraint_elstpot.c:        	 colvar.myder[i_c][i][ix] -= -dfunc*rij[ix]*mtd_data->mass[k]/(mod_rij*mass1);
restraint_energy.c:  colvar.ss0[i_c] = mtd_data->energy;
restraint_func.c:   fprintf(mtd_data->fplog, "FUNCTION OF CVS NOT SUPPORTED: COMPILE WITH LIBMATHEVAL \n");
restraint_hbonds.c:        minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_hbonds.c:        rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_hbonds.c:        rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_hbonds.c:        rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_helix.c:    minimal_image(mtd_data->pos[a1],mtd_data->pos[a0],&mod_rij,r01[ii]);
restraint_helix.c:    minimal_image(mtd_data->pos[a2],mtd_data->pos[a1],&mod_rij,r21[ii]);
restraint_helix.c:    minimal_image(mtd_data->pos[a3],mtd_data->pos[a2],&mod_rij,r23[ii]);
restraint_histogram.c:          mtd_data->pos[iat][ix] += teststep;
restraint_histogram.c:          mtd_data->pos[iat][ix] += -2.*teststep;
restraint_histogram.c:          mtd_data->pos[iat][ix] += teststep;
restraint_intracontact.c:      minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_mindist.c:          minimal_image(mtd_data->pos[firstAtom],mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_mindist.c:          rij[0] = mtd_data->pos[firstAtom][0] - mtd_data->pos[secondAtom][0];
restraint_mindist.c:          rij[1] = mtd_data->pos[firstAtom][1] - mtd_data->pos[secondAtom][1];
restraint_mindist.c:          rij[2] = mtd_data->pos[firstAtom][2] - mtd_data->pos[secondAtom][2];
restraint_parabetarmsd.c:      minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_parabetarmsd.c:      rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_parabetarmsd.c:      rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_parabetarmsd.c:      rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_parabetarmsd.c:          minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_parabetarmsd.c:          rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_parabetarmsd.c:          rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_parabetarmsd.c:          rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_pca.c:		if (!(mtd_data->istep%colvar.pca_upstride[i_c])) {
restraint_pca.c:				inpack.r1[0][i] = mtd_data->pos[iat][0];	
restraint_pca.c:				inpack.r1[1][i] = mtd_data->pos[iat][1];
restraint_pca.c:				inpack.r1[2][i] = mtd_data->pos[iat][2];
restraint_pca.c:				cm0 += mtd_data->pos[iat][0]*colvar.pca_align_mass[i];
restraint_pca.c:				cm1 += mtd_data->pos[iat][1]*colvar.pca_align_mass[i];
restraint_pca.c:				cm2 += mtd_data->pos[iat][2]*colvar.pca_align_mass[i];
restraint_pca.c:				outpack.r1p[0][i] = mtd_data->pos[iat][0] - cm0;
restraint_pca.c:				outpack.r1p[1][i] = mtd_data->pos[iat][1] - cm1;
restraint_pca.c:				outpack.r1p[2][i] = mtd_data->pos[iat][2] - cm2;
restraint_pca.c:			cm0 += mtd_data->pos[iat][0]*colvar.pca_align_mass[i];
restraint_pca.c:			cm1 += mtd_data->pos[iat][1]*colvar.pca_align_mass[i];
restraint_pca.c:			cm2 += mtd_data->pos[iat][2]*colvar.pca_align_mass[i];
restraint_pca.c:			rrpfit[0] = mtd_data->pos[iat][0] - cm0;
restraint_pca.c:			rrpfit[1] = mtd_data->pos[iat][1] - cm1;
restraint_pca.c:			rrpfit[2] = mtd_data->pos[iat][2] - cm2;
restraint_phivalues.c:                minimal_image(mtd_data->pos[aj], mtd_data->pos[ak], &mod_rij, rij);
restraint_phivalues.c:                rij[0] = mtd_data->pos[aj][0]-mtd_data->pos[ak][0];
restraint_phivalues.c:                rij[1] = mtd_data->pos[aj][1]-mtd_data->pos[ak][1];
restraint_phivalues.c:                rij[2] = mtd_data->pos[aj][2]-mtd_data->pos[ak][2];
restraint_poly.c:// fprintf(mtd_data->fplog,"count is %d\n",i_c);
restraint_poly.c:// for(int i=0;i<i_c; i++) fprintf(mtd_data->fplog,"%d, num=%f\n", i, colvar.ss0[i]);
restraint_poly.c:   /* fprintf(mtd_data->fplog, 
restraint_poly.c://fprintf(mtd_data->fplog,"natoms=%d\n",colvar.natoms[i_c]);
restraint_poly.c:     /* fprintf(mtd_data->fplog, 
restraint_position.c:      colvar.ss0[i_c] +=  mtd_data->pos[iat][dir]/colvar.natoms[i_c];
restraint_position.c:      for(dir=i1;dir<i2;dir+=i3)pos2[dir]+=mtd_data->pos[iat][dir]/colvar.natoms[i_c];
restraint_position.c:      for(dir=i1;dir<i2;dir+=i3)pos2[dir]+=mtd_data->pos[iat][dir]/colvar.natoms[i_c];
restraint_ppii.c:    dih[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3], &mtd_data->metapbc, 
restraint_ppii.c:    dih[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3], &mtd_data->metapbc, 
restraint_ppii.c:    dih[idtc] = dih_angle(mtd_data->pos[a0], mtd_data->pos[a1], mtd_data->pos[a2], mtd_data->pos[a3],
restraint_puckering.c:        folded[0][0]=mtd_data->pos[iat][0];
restraint_puckering.c:        folded[0][1]=mtd_data->pos[iat][1];
restraint_puckering.c:        folded[0][2]=mtd_data->pos[iat][2];
restraint_puckering.c:	    minimal_image(mtd_data->pos[iat],mtd_data->pos[prev],&tempr,temp);
restraint_puckering.c:  if(mtd_data->puckering_R==NULL) mtd_data->puckering_R=(rvec*) malloc(sizeof(rvec)*6);
restraint_puckering.c:  mod = generate_R(i_c,mtd_data,mtd_data->puckering_R,Rp,Rdp,RpxRdp);
restraint_puckering.c:     z[j]=puckering_Zeta (mtd_data->puckering_R[j],RpxRdp,mod);
restraint_puckering.c:		  puckering_gradQ(gradQ, z, Q, mtd_data->puckering_R, Rp, Rdp, RpxRdp, mod, i); 
restraint_puckering.c:			puckering_gradphi(gradphi, z, mtd_data->puckering_R, Rp, Rdp, RpxRdp, mod, i);
restraint_puckering.c:			puckering_gradtheta(gradtheta,z, mtd_data->puckering_R, Rp, Rdp, RpxRdp,mod,i);
restraint_rdf.c://  fprintf(mtd_data->fplog,"New call %d\n",i_c );
restraint_rdf.c://  fprintf(mtd_data->fplog, "ATOM 1 %f %f %f \n", mtd_data->pos[colvar.cvatoms[i_c][0]][0], mtd_data->pos[colvar.cvatoms[i_c][0]][1], mtd_data->pos[colvar.cvatoms[i_c][0]][2] );
restraint_rdf.c://  fprintf(mtd_data->fplog,"ATOM 2 %f %f %f \n", mtd_data->pos[colvar.cvatoms[i_c][1]][0], mtd_data->pos[colvar.cvatoms[i_c][1]][1], mtd_data->pos[colvar.cvatoms[i_c][1]][2] );
restraint_rdf.c:         if(colvar.cell_pbc[i_c]){ minimal_image(mtd_data->pos[iat], mtd_data->pos[jat], &mod_rij, rij); }
restraint_rdf.c:           rij[0] = mtd_data->pos[iat][0]-mtd_data->pos[jat][0];
restraint_rdf.c:           rij[1] = mtd_data->pos[iat][1]-mtd_data->pos[jat][1];
restraint_rdf.c:           rij[2] = mtd_data->pos[iat][2]-mtd_data->pos[jat][2];
restraint_rdf.c://            fprintf( mtd_data->fplog,"Hello %d %d %d : %f %f %f %f %f %f\n", k, iat, jat, mod_rij, lowB, upperB, triangleFunc( lowB ), triangleFunc( upperB ), integratedTriangleFunc( lowB, upperB ) );
restraint_rgyr.c:  if (colvar.mm[i_c]==0) totmass += mtd_data->mass[firstAtom];   //mass-weighted
restraint_rgyr.c:  for(i=0;i<3;i++) pos0[i] = mtd_data->pos[firstAtom][i];
restraint_rgyr.c:    if (colvar.mm[i_c]==0) totmass += mtd_data->mass[firstAtom];
restraint_rgyr.c:      minimal_image(mtd_data->pos[firstAtom], pos0, &mod_rij, rdiff);
restraint_rgyr.c:      if (colvar.mm[i_c]==0) for(j=0;j<3;j++) rcom[j] += mtd_data->mass[firstAtom]*rdiff[j];
restraint_rgyr.c:      if (colvar.mm[i_c]==0)  for(j=0;j<3;j++) rcom[j] += mtd_data->mass[firstAtom]*(mtd_data->pos[firstAtom][j]-pos0[j]);
restraint_rgyr.c:      else                    for(j=0;j<3;j++) rcom[j] += mtd_data->pos[firstAtom][j]-pos0[j];
restraint_rgyr.c:     minimal_image(mtd_data->pos[firstAtom], rcom, &mod_rij, rdiff);
restraint_rgyr.c:     for(j=0;j<3;j++) rdiff[j] = mtd_data->pos[firstAtom][j]-rcom[j];
restraint_rgyr.c:             Rg += mtd_data->mass[firstAtom]*mod_rij*mod_rij;
restraint_rgyr.c:             for(j=0;j<3;j++) colvar.myder[i_c][i][j] = rdiff[j]*mtd_data->mass[firstAtom]; 
restraint_rgyr.c:             gyration_tensor[0][0]+=mtd_data->mass[firstAtom]*rdiff[0]*rdiff[0];
restraint_rgyr.c:             gyration_tensor[1][1]+=mtd_data->mass[firstAtom]*rdiff[1]*rdiff[1];
restraint_rgyr.c:             gyration_tensor[2][2]+=mtd_data->mass[firstAtom]*rdiff[2]*rdiff[2];
restraint_rgyr.c:             gyration_tensor[0][1]+=mtd_data->mass[firstAtom]*rdiff[0]*rdiff[1];
restraint_rgyr.c:             gyration_tensor[0][2]+=mtd_data->mass[firstAtom]*rdiff[0]*rdiff[2];
restraint_rgyr.c:             gyration_tensor[1][2]+=mtd_data->mass[firstAtom]*rdiff[1]*rdiff[2];
restraint_rgyr.c:                             minimal_image(mtd_data->pos[firstAtom], rcom, &mod_rij, rdiff);
restraint_rgyr.c:                   for (j=0;j<3;j++) rdiff[j] = mtd_data->pos[firstAtom][j]-rcom[j];
restraint_rgyr.c:                   if (colvar.mm[i_c]==0) for (j=0;j<3;j++) colvar.myder[i_c][i][j]=mtd_data->mass[firstAtom]*(prefactor[0]*transf[j][0]*tX[0]+prefactor[1]*transf[j][1]*tX[1]+prefactor[2]*transf[j][2]*tX[2]);
restraint_spath.c:            //fprintf(mtd_data->fplog,"|- CALCULATING NEIGHBOUR LIST AT STEP %d\n",colvar.it);
restraint_spath.c:                     inpack.r0[i][0] = mtd_data->pos[iat][0];
restraint_spath.c:                     inpack.r0[i][1] = mtd_data->pos[iat][1];
restraint_spath.c:                     inpack.r0[i][2] = mtd_data->pos[iat][2];
restraint_spath.c:			hbd_collect_jacobian(pmy_sz->hbd_running,pmy_sz->mathybrid,pmy_sz->myinverse,mtd_data->fplog,1,1);
restraint_spath.c:			if(pmy_sz->debug_metrics)test_hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[0],&work,pmy_sz->mathybrid,mtd_data->fplog);
restraint_spath.c:					//fprintf(mtd_data->fplog,"FRAME I= %3d\n",i);
restraint_spath.c:					//if(nneigh>5)check_hbd_vecmvec_ref(pmy_sz->hbd_running,pmy_sz->hbd_frameset[0],pmy_sz->hbd_frameset[1],pmy_sz->hbd_frameset[2],pmy_sz->hbd_frameset[3],pmy_sz->hbd_frameset[4],pmy_sz->mathybrid,mtd_data->fplog);
restraint_spath.c:				    hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[i],&work,pmy_sz->mathybrid,mtd_data->fplog);
restraint_spath.c:               // fprintf(mtd_data->fplog,"ERR %d %f \n",i,work.err);
restraint_spath.c:               // fflush(mtd_data->fplog);
restraint_spath.c:			//fprintf(mtd_data->fplog,"V %12.6f %12.6f %12.6f\n",colvar.myder[i_c][i][0],colvar.myder[i_c][i][1],colvar.myder[i_c][i][2]); 
restraint_spath.c:          if(strcmp(pmy_sz->path_type,"CMAP") == 0) mean_map(pmy_sz,ds_dcm,i_c,mtd_data->fplog); 
restraint_spath.c:          if(strcmp(pmy_sz->path_type,"MSD") == 0 || strcmp(pmy_sz->path_type,"DMSD") == 0) mean_rmsd(pmy_sz,ds_dr1,i_c,mtd_data->fplog); 
restraint_spath.c:fprintf(mtd_data->fplog,"Entering PATH finite difference test system\n");
restraint_spath.c:fprintf(mtd_data->fplog,"-------------------------------------------\n");
restraint_spath.c:fprintf(mtd_data->fplog,"TEST1: derivative of the value (dpathvar/d_r_ref)\n");
restraint_spath.c:                case 0:  fprintf(mtd_data->fplog,"TESTING: NFR %d X %4d ANAL %18.9f NUMER %18.9f DELTA %18.9f\n",i,k,dpath_dr0[l][k][i],(newpath-oldpath)/delta,dpath_dr0[l][k][i]-(newpath-oldpath)/delta);break;
restraint_spath.c:                case 1:  fprintf(mtd_data->fplog,"TESTING: NFR %d Y %4d ANAL %18.9f NUMER %18.9f DELTA %18.9f\n",i,k,dpath_dr0[l][k][i],(newpath-oldpath)/delta,dpath_dr0[l][k][i]-(newpath-oldpath)/delta);break;
restraint_spath.c:                case 2:  fprintf(mtd_data->fplog,"TESTING: NFR %d Z %4d ANAL %18.9f NUMER %18.9f DELTA %18.9f\n",i,k,dpath_dr0[l][k][i],(newpath-oldpath)/delta,dpath_dr0[l][k][i]-(newpath-oldpath)/delta);break;
restraint_spath.c:fprintf(mtd_data->fplog,"exiting PATH test system\n");
restraint_spath.c:        if(mtd_data->istep==0 && logical.debug!=1){
restraint_spath.c:              fprintf(mtd_data->fplog,"|- INITIALIZING ENSING PATHWAY ....\n");
restraint_spath.c:              fprintf(mtd_data->fplog,"|- INITIALIZING ENSING PATHWAY EVOLUTION DONE!\n");
restraint_spath.c:			hbd_collect_jacobian(pmy_sz->hbd_running,pmy_sz->mathybrid,pmy_sz->myinverse,mtd_data->fplog,1,1);
restraint_spath.c:			if(pmy_sz->debug_metrics)test_hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[0],&work,pmy_sz->mathybrid,mtd_data->fplog);
restraint_spath.c:				   hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[i],&work,pmy_sz->mathybrid,mtd_data->fplog);
restraint_spath.c:                //fprintf(mtd_data->fplog,"ERR %d %f \n",i,outpack.err);
restraint_spath.c:                //fflush(mtd_data->fplog);
restraint_spath.c:        //fprintf(mtd_data->fplog,"ipntmin %d ipntmin2 %d inpntmin3 %d\n",ipntmin,ipntmin2,ipntmin3);
restraint_spath.c:									  mtd_data->fplog);
restraint_spath.c:									  mtd_data->fplog);
restraint_spath.c:									 mtd_data->fplog);
restraint_spath.c:										  mtd_data->fplog);
restraint_spath.c:									  mtd_data->fplog);
restraint_spath.c:										  mtd_data->fplog);
restraint_spath.c:                 //fprintf(mtd_data->fplog,"RC %f\n",rc); 
restraint_spath.c:                     //fprintf(mtd_data->fplog,"|-CALCULATING FORCE ON THE FRAMES (S)...\n"); 
restraint_spath.c:										  mtd_data->fplog);
restraint_spath.c:										  mtd_data->fplog);
restraint_spath.c:                     //fprintf(mtd_data->fplog,"DXS %f RC %f\n",dx,rc); 
restraint_spath.c:                     //fprintf(mtd_data->fplog,"|-S: DX %f W1 %f W2 %f I %d %d\n",dx,w1,w2,ipntmin,ipntmin2); 
restraint_spath.c:                           //fprintf(mtd_data->fplog,"|-S: DERCV %d  %f \n",i,dercv[i]); 
restraint_spath.c:                    // if( (pmy_sz->ievol>0) && (mtd_data->istep%pmy_sz->ievol==0) && (mtd_data->istep!=0) )do_bernd_evolution(pmy_sz);  
restraint_spath.c:                     //fprintf(mtd_data->fplog,"|-CALCULATING FORCE ON THE FRAMES (S) DONE!\n"); 
restraint_spath.c://        fprintf(mtd_data->fplog,"exiting PATH test system\n");
restraint_spath.c:	//fprintf(mtd_data->fplog,"|- ENTERED THE MSD ROUTINE: I_C IS %d\n",i_c);
restraint_spath.c:		//fprintf(mtd_data->fplog,"|- ATOM %d ID %d : X %f\n",i,iat,mtd_data->pos[iat][0]);
restraint_spath.c:		rmsd_workstruct.r0[0][i] = mtd_data->pos[iat][0];
restraint_spath.c:		rmsd_workstruct.r0[1][i] = mtd_data->pos[iat][1];
restraint_spath.c:		rmsd_workstruct.r0[2][i] = mtd_data->pos[iat][2];
restraint_spath.c:		//fprintf(mtd_data->fplog,"|- ATOM %d : X %f Y %f Z %f\n",i,rmsd_workstruct.r0[0][i],rmsd_workstruct.r0[1][i],rmsd_workstruct.r0[2][i]);
restraint_spath.c:				colvar.myder[i_c][i][j] = mtd_data->pos[iat][j];
restraint_spath.c:	//fprintf(mtd_data->fplog,"|- EXITED MSD  ROUTINE\n");
restraint_sprint.c:      if(mtd_data->mass[colvar.cvatoms[i_c][i]] == colvar.realpar[i_c][j][0]) {
restraint_sprint.c:        minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[secondAtom], &mod_rij, rij);
restraint_sprint.c:        rij[0] = mtd_data->pos[firstAtom][0]-mtd_data->pos[secondAtom][0];
restraint_sprint.c:        rij[1] = mtd_data->pos[firstAtom][1]-mtd_data->pos[secondAtom][1];
restraint_sprint.c:        rij[2] = mtd_data->pos[firstAtom][2]-mtd_data->pos[secondAtom][2];
restraint_sprint.c:    for (i=0;i<nat;i++){ tmpmass[i]=mtd_data->mass[colvar.cvatoms[i_c][list_atoms[i]]]; }
restraint_sprint.c://          printf("i listatoms2 mass[listatoms2] cv[listatoms] = %4d %4d %8.4f %8.4f\n",k,list_atoms2[k],mtd_data->mass[colvar.cvatoms[i_c][list_atoms2[k]]],sprint_data.cm[list_atoms2[k]][nat-1]); //debug
restraint_torsion.c:      myp[j][0] += mtd_data->mass[iat]*mtd_data->pos[iat][0];
restraint_torsion.c:      myp[j][1] += mtd_data->mass[iat]*mtd_data->pos[iat][1];
restraint_torsion.c:      myp[j][2] += mtd_data->mass[iat]*mtd_data->pos[iat][2];
restraint_torsion.c:      totmasse[j] += mtd_data->mass[iat];
restraint_torsion.c:  psi = dih_angle(myp[0],myp[1],myp[2],myp[3],&mtd_data->metapbc,r01,r21,r23,m,n,
restraint_torsion.c:  psi = dih_angle(myp[0],myp[1],myp[2],myp[3],&mtd_data->metapbc,r01,r21,r23,m,n,
restraint_torsion.c:      for(ix=0;ix<3;ix++) colvar.myder[i_c][k][ix] = -d[j][ix]*mtd_data->mass[iat]/totmasse[j];
restraint_waterbridge.c:      minimal_image(mtd_data->pos[firstAtom], mtd_data->pos[middleAtom], &mod_rik, rik);
restraint_waterbridge.c:          minimal_image(mtd_data->pos[secondAtom], mtd_data->pos[middleAtom], &mod_rjk, rjk);
restraint_zpath.c:            //fprintf(mtd_data->fplog,"|- CALCULATING NEIGHBOUR LIST AT STEP %d\n",colvar.it);
restraint_zpath.c:       	    inpack.r0[i][0] = mtd_data->pos[iat][0];
restraint_zpath.c:            inpack.r0[i][1] = mtd_data->pos[iat][1];
restraint_zpath.c:            inpack.r0[i][2] = mtd_data->pos[iat][2];
restraint_zpath.c:			hbd_collect_jacobian(pmy_sz->hbd_running,pmy_sz->mathybrid,pmy_sz->myinverse,mtd_data->fplog,1,1);
restraint_zpath.c:			if(pmy_sz->debug_metrics)test_hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[0],&outpack,pmy_sz->mathybrid,mtd_data->fplog);
restraint_zpath.c://   fprintf(mtd_data->fplog,"ENTERING_MEASURE\n");
restraint_zpath.c://                fflush(mtd_data->fplog);
restraint_zpath.c:                //fprintf(mtd_data->fplog,"PRE RMSD %d %d\n",i,pmy_sz->lneigh[ii]);
restraint_zpath.c:                //fflush(mtd_data->fplog);
restraint_zpath.c:				hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[i],&outpack,pmy_sz->mathybrid,mtd_data->fplog);
restraint_zpath.c:             //   fprintf(mtd_data->fplog,"ERR %d %f \n",i,outpack.err);
restraint_zpath.c:                fflush(mtd_data->fplog);
restraint_zpath.c://   fprintf(mtd_data->fplog,"EXITING_MEASURE\n");
restraint_zpath.c://                fflush(mtd_data->fplog);
restraint_zpath.c:        z/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                dz_dr0[0][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                dz_dr0[1][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                dz_dr0[2][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                       dz_dr1[i][0][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                       dz_dr1[i][1][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:                       dz_dr1[i][2][j]/=(mtd_data->ampli)*(mtd_data->ampli);
restraint_zpath.c:          if(strcmp(pmy_sz->path_type,"CMAP") == 0) mean_map(pmy_sz,dz_dcm,i_c,mtd_data->fplog);
restraint_zpath.c:          if(strcmp(pmy_sz->path_type,"MSD") == 0 || strcmp(pmy_sz->path_type,"DMSD") == 0) mean_rmsd(pmy_sz,dz_dr1,i_c,mtd_data->fplog);
restraint_zpath.c:          //fprintf(mtd_data->fplog,"|---FILLING TEST ARRAYS \n");
restraint_zpath.c:          //fprintf(mtd_data->fplog,"|---FILLING TEST ARRAYS DONE \n");
restraint_zpath.c:        if(mtd_data->istep==0 && logical.debug!=1){
restraint_zpath.c:              fprintf(mtd_data->fplog,"|- INITIALIZING ENSING PATHWAY ....\n");
restraint_zpath.c:              fprintf(mtd_data->fplog,"|- INITIALIZING ENSING PATHWAY EVOLUTION DONE!\n");
restraint_zpath.c:			hbd_collect_jacobian(pmy_sz->hbd_running,pmy_sz->mathybrid,pmy_sz->myinverse,mtd_data->fplog,1,1);
restraint_zpath.c:			if(pmy_sz->debug_metrics)test_hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[0],&outpack,pmy_sz->mathybrid,mtd_data->fplog);
restraint_zpath.c:				   hbd_metrics_new(pmy_sz->hbd_running,pmy_sz->hbd_frameset[i],&outpack,pmy_sz->mathybrid,mtd_data->fplog);
restraint_zpath.c:                //fprintf(mtd_data->fplog,"ERR %d %f \n",i,outpack.err);
restraint_zpath.c:                fflush(mtd_data->fplog);
restraint_zpath.c:        //fprintf(mtd_data->fplog,"ipntmin %d ipntmin2 %d inpntmin3 %d\n",ipntmin,ipntmin2,ipntmin3);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:									  mtd_data->fplog);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:										  mtd_data->fplog);
restraint_zpath.c:										  mtd_data->fplog);
restraint_zpath.c:										  mtd_data->fplog);
restraint_zpath.c:										  mtd_data->fplog);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:										mtd_data->fplog);
restraint_zpath.c:                 //fprintf(mtd_data->fplog,"RC %f\n",rc); 
restraint_zpath.c:                     //fprintf(mtd_data->fplog,"|-CALCULATING FORCE ON THE FRAMES (Z)...\n"); 
restraint_zpath.c:                     //fprintf(mtd_data->fplog,"DXZ %f RC %f \n",dx,rc); 
restraint_zpath.c:                     //fprintf(mtd_data->fplog,"|-Z: DX %f W1 %f W2 %f I %d %d\n",dx,w1,w2,ipntmin,ipntmin2); 
restraint_zpath.c:                          //fprintf(mtd_data->fplog,"|-Z: DERCV %d  %f \n",i,dercv[i]);
restraint_zpath.c:            //         if( ( pmy_sz->ievol>0) && ( mtd_data->istep%pmy_sz->ievol==0) && (mtd_data->istep!=0) ) do_bernd_evolution(pmy_sz); 
restraint_zpath.c:                     //fprintf(mtd_data->fplog,"|-CALCULATING FORCE ON THE FRAMES (Z) DONE!\n"); 
restraint_zpath.c://        fprintf(mtd_data->fplog,"exiting PATH test system\n");
testderivatives.c:        mtd_data->pos[iat][ix] += teststep;
testderivatives.c:        mtd_data->pos[iat][ix] += -2.*teststep;
testderivatives.c:        mtd_data->pos[iat][ix] += teststep;
testderivatives.c:              mtd_data->pos[iat][ix] += teststep;
testderivatives.c:              mtd_data->pos[iat][ix] += -2.*teststep;
testderivatives.c:              mtd_data->pos[iat][ix] += teststep;
testderivatives.c:  if(mtd_data->testderivatives_first){
testderivatives.c:    snew(mtd_data->testderivatives_integral,ncv);
testderivatives.c:    snew(mtd_data->testderivatives_pos,ncv);
testderivatives.c:    snew(mtd_data->testderivatives_der,ncv);
testderivatives.c:    snew(mtd_data->testderivatives_previous_pos,ncv);
testderivatives.c:    snew(mtd_data->testderivatives_previous_der,ncv);
testderivatives.c:      mtd_data->testderivatives_integral[icv]=colvar.ss0[icv];
testderivatives.c:      snew(mtd_data->testderivatives_pos[icv],colvar.natoms[icv]);
testderivatives.c:      snew(mtd_data->testderivatives_der[icv],colvar.natoms[icv]);
testderivatives.c:      snew(mtd_data->testderivatives_previous_pos[icv],colvar.natoms[icv]);
testderivatives.c:      snew(mtd_data->testderivatives_previous_der[icv],colvar.natoms[icv]);
testderivatives.c:        mtd_data->testderivatives_der[icv][i][j]=colvar.myder[icv][i][j];
testderivatives.c:        mtd_data->testderivatives_pos[icv][i][j]=mtd_data->pos[iat][j];
testderivatives.c:  if(!mtd_data->testderivatives_first){
testderivatives.c:          mtd_data->testderivatives_integral[icv]+=
testderivatives.c:          0.5*(mtd_data->testderivatives_der[icv][i][j]+mtd_data->testderivatives_previous_der[icv][i][j])*(mtd_data->testderivatives_pos[icv][i][j]-mtd_data->testderivatives_previous_pos[icv][i][j]);
testderivatives.c:    if(!mtd_data->testderivatives_debug_file) mtd_data->testderivatives_debug_file = fopen((mtd_data->ionode?"DEBUG":"/dev/null"), "w");
testderivatives.c:    fprintf(mtd_data->testderivatives_debug_file, "%10.3f", mtd_data->time);
testderivatives.c:    for(icv=0;icv<colvar.nconst;icv++) fprintf(mtd_data->testderivatives_debug_file, "   %10.8f", mtd_data->testderivatives_integral[icv]-colvar.ss0[icv]);
testderivatives.c:    fprintf(mtd_data->testderivatives_debug_file, "\n");
testderivatives.c:    fflush(mtd_data->testderivatives_debug_file);
testderivatives.c:        mtd_data->testderivatives_previous_der[icv][i][j]=mtd_data->testderivatives_der[icv][i][j];
testderivatives.c:        mtd_data->testderivatives_previous_pos[icv][i][j]=mtd_data->testderivatives_pos[icv][i][j];
testderivatives.c:  mtd_data->testderivatives_first=0;
